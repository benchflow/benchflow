#!/bin/bash

if [ "$CHAP_SERVICE_NAME" != "" ]; then
  stty -onlcr 2>/dev/null	# inhibits carriage return if -t was specified
fi

if [ "$CHAP_TASK_MODE" != "1" ]; then
  echo "get-chaplocal' should only be run in chaperone --task mode from the docker host"
  exit 1
fi

source $APPS_DIR/etc/version.inc

if [ "$IMAGE_NAME" == "" ]; then
    script_text=`cat $APPS_DIR/bin/chaplocal`
else
    script_text=`sed "s|chapdev/chaperone-baseimage|$IMAGE_NAME|" $APPS_DIR/bin/chaplocal`
fi


cat <<EOF
#################################################################################
#
# YOU SHOULD NOT BE SEEING THIS!!!!!!!!!  IF SO, YOU ARE NOT PIPING INTO sh!
#
# Make sure you pipe the output of your docker command into sh, like this...
#
#   docker run -i chapdev/chaperone-baseimage --command get-chaplocal | sh
#                                                                     ^^^^
#################################################################################
if [ -f chaplocal ]; then
  echo "'chaplocal' script already exists in this directory. Won't overwrite."
  cat >/dev/null
  exit 1
fi
cat >chaplocal <<'-QEOF-'
$script_text
-QEOF-
chmod ugo+x chaplocal
echo ""
echo "The 'chaplocal' script is ready to use.  Here is the help you get if you type"
echo "     ./chaplocal"
echo "at the command line..."
./chaplocal       
#################################################################################
#
# YOU SHOULD NOT BE SEEING THIS!!!!!!!!!  IF SO, YOU ARE NOT PIPING INTO sh!
#
# Make sure you pipe the output of your docker command into sh, like this...
#
#   docker run -i chapdev/chaperone-baseimage --command get-chaplocal | sh
#                                                                     ^^^^
#################################################################################
EOF
